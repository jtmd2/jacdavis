# 4 April 2019
# Jac Davis

setwd("E:\\Food4Cities\\iterative model\\model v1")

# theta <- a(i) + b(j) + c(k) + d(l)
# where
# theta = food/nutrition security for pixel
# a(i) = geographic parameters for pixel i
# b(j) = food availability parameters for location j
# c(k) = food access parameters for location k
# d(l) = food utilization parameters for location l

# general setup
library(rgdal)
library(ggmap)
library(dismo)
library(rgeos)
library(dplyr)
library(data.table)
library(MASS)
library(leaflet)
library(gbm)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)

# google api key for map data
# register_google(key = "AIzaSyA4kvprW0CVj6BmjqaTOZZQ9vZK73TWFvw")
# register_google(key = "AIzaSyBc_8LjJJrs1igirbCq4TvpGZFJuHrSBm8")

# functions

# merge multiple csvs
multimerge <- function(mypath){
  filenames = list.files(path=mypath,
                         full.names=TRUE)
  datalist = lapply(filenames, function(x)
  {read.csv(file=x,header=T)})
  Reduce(function(x,y){merge(x,y)},
         datalist)
}

# extract coordinates from shapefile data
shape_extract <- function(mydata){
  mydata_ff <- fortify(mydata) # convert polygons to df
  mydata$ids <- row.names(mydata) # add id variable to df
  mydata_ff$ids <- row.names(mydata_ff) # add id variable to df
  mydata_ff <- left_join(mydata_ff, mydata@data) # join attributes to df
  return(mydata_ff)
  # figure out how to save procedurally with different datafile names
}

# map shapefile data
shapemap <- function(mydata, myfill,
                     mylabels, mytitle){
  map <- ggplot(mydata,
              aes(long, lat)) +
    geom_polygon(data=mydata,
               aes(group=group,
                   fill=myfill)) +
    coord_equal() +
    labs(x = "Easting (m)", y = "Northing (m)",
       fill = mylabels) +
    ggtitle(mytitle) +
    theme_bw() +
    theme(line=element_blank())
  plot(map)
}


# sample points from map
#set.seed(25)
#points <- spsample(SDRs, n=10000, "random", pch=3)
#pointsdata <- as.data.frame(points)

#setDT(pointsdata)


# map points to google map
#mapPoints <- ggmap(get_map(location="Cape Town",
#                           zoom=9)) +
 # geom_point(aes(x1,x2),
#             data=pointsdata,
#             size=1,
#             color="darkblue",
#             alpha=.5)
#mapPoints


# layer 1: household data

# geocode household data using google maps
household <- read.csv("GHS 2017 Household v1.0 CSV.csv")
household$place <- household$Stratum
codes <- read.csv("Copy of MainPlaceLookupTable.csv")
codes$place <- codes$Ã¯..MP_CODE

household_total <- merge(household,codes,by="place")

# lots of lookups - run only once
#household_total$address <- paste(as.character(household_total$MP_NAME),"South Africa", sep=", ")
#household_total_geo <- mutate_geocode(household_total, address) # RUN THIS ONLY ONCE
#write.csv(household_total_geo, "geocoded_household_total_ALL.csv")

# pick out households in Western Cape
household_CT <- household_total[household_total$PR_NAME=="WESTERN CAPE",]

# look up addresses of sampling areas ("place") in Western Cape
household_CT$address <- paste(as.character(household_CT$MP_NAME),"Western Cape","South Africa", sep=", ")
#household_geo <- mutate_geocode(household_CT, address) # RUN THIS ONLY ONCE
# write Western Cape locations to csv
write.csv(household_geo, "geocoded_household_total.csv")

household_CT_geo <- read.csv("geocoded_household_total.csv")

# household data selection and cleaning (Western Cape only)

household_demo <- as.data.frame(cbind(id = household_CT_geo$uqnr,
                                      place =  household_CT_geo$place,
                                      gender = household_CT_geo$head_sex,
                                      age = household_CT_geo$head_age,
                                      group = household_CT_geo$head_popgrp,
                                      dwelling = household_CT_geo$Q51MainD,
                                      roof_material = household_CT_geo$Q52Roof,
                                      roof_condition = household_CT_geo$Q54RoofC,
                                      property_market_value = household_CT_geo$Q58Val,
                                      income = household_CT_geo$Q812Netincome,
                                      expenses = household_CT_geo$Q814Exp,
                                      hh_size = household_CT_geo$hholdsz,
                                      language = household_CT_geo$Q101Lan,
                                      child_5under = household_CT_geo$chld5yr_hh,
                                      child_17under = household_CT_geo$chld17yr_hh,
                                      lat = household_CT_geo$lat,
                                      lon = household_CT_geo$lon))


household_transport <- as.data.frame(cbind(id = household_CT_geo$uqnr,
                                           place =  household_CT_geo$place,
                                           trips_minibus = household_CT_geo$Q68Trta,
                                           trips_buses = household_CT_geo$Q69Trbu,
                                           trips_trains = household_CT_geo$Q610Trtr,
                                           vehicle = household_CT_geo$Q815aVehicle,
                                           lat = household_CT_geo$lat,
                                           lon = household_CT_geo$lon))


household_food_security <- as.data.frame(cbind(id = household_CT_geo$uqnr,
                                               place =  household_CT_geo$place,
                                               insufficient_food_adult = household_CT_geo$Q76Hung,
                                               insufficient_food_children = household_CT_geo$Q77Hung5,
                                               run_out_food_money = household_CT_geo$Q79MF,
                                               run_out_food_money_5in30 = household_CT_geo$Q79MF5,
                                               cut_meal_size = household_CT_geo$Q710Meal,
                                               cut_meal_size_5in30 = household_CT_geo$Q710Meal5,
                                               skipped_meals = household_CT_geo$Q711Less,
                                               skipped_meals_5in30 = household_CT_geo$Q711Less5,
                                               smaller_variety_food = household_CT_geo$Q712Lfd,
                                               smaller_variety_food_5in30 = household_CT_geo$Q712Lfd5,
                                               lat = household_CT_geo$lat,
                                               lon = household_CT_geo$lon))


household_resources <- as.data.frame(cbind(id = household_CT_geo$uqnr,
                                           place =  household_CT_geo$place,
                                           establishing_business = household_CT_geo$Q510cBussiness,
                                           drinking_water_source = household_CT_geo$Q512Drin,
                                           distance_to_water = household_CT_geo$Q513aDist,
                                           municipal_water = household_CT_geo$Q516Muni,
                                           toilet_type = household_CT_geo$Q522Toil,
                                           toilet_distance = household_CT_geo$Q525bNear,
                                           access_electricity = household_CT_geo$Q527Access,
                                           mains_electricity = household_CT_geo$Q528aMains,
                                           electricity_quality = household_CT_geo$Q529aRate,
                                           energy_cooking = household_CT_geo$Q531Cook,
                                           rubbish_removal = household_CT_geo$Q532Rub,
                                           land_degradation = household_CT_geo$Q536Lan,
                                           water_pollution = household_CT_geo$Q536Wat,
                                           telephone = household_CT_geo$Q61phon,
                                           cellphone = household_CT_geo$Q62cell,
                                           household_cellphones = household_CT_geo$Q63NrCell,
                                           household_internet = household_CT_geo$Q65Int1,
                                           fridge = household_CT_geo$Q821Fridge,
                                           freezer = household_CT_geo$Q821Freezer,
                                           stove = household_CT_geo$Q821EStove,
                                           sink = household_CT_geo$Q821sink,
                                           lat = household_CT_geo$lat,
                                           lon = household_CT_geo$lon))


household_prod <- as.data.frame(cbind(id = household_CT_geo$uqnr,
                                      place =  household_CT_geo$place,
                                      agriculture_prod = household_CT_geo$Q81Agri,
                                      livestock_prod = household_CT_geo$Q83Live,
                                      poultry_prod = household_CT_geo$Q83Poul,
                                      grains_foodcrops_prod = household_CT_geo$Q83grai,
                                      industrial_crops_prod = household_CT_geo$Q83Indus,
                                      fruit_veg_prod = household_CT_geo$Q83fruit,
                                      fodder_pasture_prod = household_CT_geo$Q83Fod,
                                      fish_aquaculture_prod = household_CT_geo$Q83Fish,
                                      forestry_prod = household_CT_geo$Q83For,
                                      game_prod = household_CT_geo$Q83Game,
                                      other_food_prod = household_CT_geo$Q83Oth,
                                      use_agri_products = household_CT_geo$Q84Use,
                                      sell_agri_products = household_CT_geo$Q85aSell,
                                      buyers_agri_products = household_CT_geo$Q85bSProd,
                                      agri_training = household_CT_geo$Q86aTrain,
                                      agri_extension = household_CT_geo$Q86aVis,
                                      agri_grants = household_CT_geo$Q86aGrnt,
                                      agri_loans = household_CT_geo$Q86aLoan,
                                      agri_loan_inputs = household_CT_geo$Q86aInpL,
                                      agri_loan_free = household_CT_geo$Q86aInpF,
                                      agri_livestock_dipping_vaccines = household_CT_geo$Q86aDip,
                                      agri_other_assistance = household_CT_geo$Q86aOth,
                                      agri_gov_assist = household_CT_geo$Q86bAGRIASSIST,
                                      agri_nongov_assist = household_CT_geo$Q86CAnyASSIST,
                                      cattle = household_CT_geo$Q87Cattle,
                                      sheep = household_CT_geo$Q87Sheep,
                                      goats = household_CT_geo$Q87Goat,
                                      pigs = household_CT_geo$Q87Pigs,
                                      chickens = household_CT_geo$Q87Chickens,
                                      backyard_garden = household_CT_geo$Q88aBack,
                                      farm_land = household_CT_geo$Q88aFarm,
                                      school_garden = household_CT_geo$Q88aSchl,
                                      communal_garden = household_CT_geo$Q88aComm,
                                      verge_garden = household_CT_geo$Q88aVRd,
                                      other_crops = household_CT_geo$Q88aOth,
                                      house_land_ha = household_CT_geo$Q88bHect,
                                      lat = household_CT_geo$lat,
                                      lon = household_CT_geo$lon))


household_food <- as.data.frame(cbind(id = household_CT_geo$uqnr,
                                      place =  household_CT_geo$place,
                                      beans_peas_nuts = household_CT_geo$Q713BEAN,
                                      maize_rice_bread_grains = household_CT_geo$Q713MAIZE,
                                      potatoes_cassava = household_CT_geo$Q713POTA,
                                      spinach_greens = household_CT_geo$Q713SPINASH,
                                      other_vegetables = household_CT_geo$Q713OTHVEG,
                                      fruit = household_CT_geo$Q713FRUIT,
                                      meat_fish_eggs = household_CT_geo$Q713MEAT,
                                      dairy = household_CT_geo$Q713dairy,
                                      sugar = household_CT_geo$Q713SUG,
                                      oil_butter_fat = household_CT_geo$Q713OIL,
                                      lat = household_CT_geo$lat,
                                      lon = household_CT_geo$lon))


# model v1: household survey data only

# choose outcome variable: for now, insufficient food for adults OR children
# 1 = never, 2-5 = not never, 6 = NA, 9 = missing
# in tgt var: 1 = yes, 0 = never gone hungry in past year (adult or child)
household_food_security$FS_tgt <- 0
household_food_security$FS_tgt[household_food_security$insufficient_food_adult %in% c(2,3,4,5)] <- 1
household_food_security$FS_tgt[household_food_security$insufficient_food_adult %in% c(6,9)] <- NA
household_food_security$FS_tgt[household_food_security$insufficient_food_children %in% c(2,3,4,5)] <- 1
household_food_security$FS_tgt[household_food_security$insufficient_food_children == 9] <- NA

# create dataset for modelling
FS_tgt <- household_food_security$FS_tgt
tgt_data <- cbind(FS_tgt,household_demo) # as an example - multiple lat/lon probably bad

# subset variables if desired
datfin <- tgt_data[c(1,4,5,8,10,11,13,17,18)]

# specify factors
datfin$FS_tgt <- as.numeric(datfin$FS_tgt)
datfin$gender <- as.factor(datfin$gender)
datfin$roof_material <- as.factor(datfin$roof_material)

# subset to non-NA
datfin <- datfin[!is.na(datfin$FS_tgt),]

# BRT

## fast trees for evaluation, for final analysis change to n.folds=10, n.trees=50

nvar <- length(datfin[1,])
par(mfrow=c(1,1))

egbm2 <- gbm.step(datfin,
                  gbm.y=1,
                  gbm.x=2:nvar,
                  tree.complexity=3,
                  family="bernoulli",
                  n.folds=2, 
                  n.trees=5,
                  step.size = 1, 
                  verbose=FALSE)
summary(egbm2, family = "serif")

# plot the brt results

op <- par(family = "serif")
gbm.plot(egbm2, 
         variable.no=0, 
         smooth=FALSE, 
         rug=TRUE, 
         n.plots=3, 
         common.scale=TRUE,
         write.title=FALSE, 
         y.label="Fitted function", 
         x.label=NULL, 
         show.contrib=TRUE,
         plot.layout=c(1,3),
         cex.axis = 2,
         cex.lab = 1.5,
         lwd = 2)

# check the brt
best.iter <- 5000
egbm2.pred <- predict.gbm(egbm2,datfin,best.iter)
summary(egbm2.pred)
plot(as.factor(datfin$FS_tgt),egbm2.pred, xlab="observed", ylab="predicted")
table(as.factor(datfin$FS_tgt),cut(egbm2.pred,c(-10,0,10)))


# model v2: add densities from food businesses (could also be travel time, etc)

# map food businesses
retail <- read.csv("geocoded_food_businesses.csv")
industrial <- read.csv("geocoded_food_industrial.csv")

# estimate food density for each point
fb1 <- retail[!is.na(retail$lat1),]
dens <- kde2d(fb1$lat1,fb1$lon1) # estimate food business density
gr <- data.frame(with(dens, expand.grid(x,y)), as.vector(dens$z)) # put density into data frame
names(gr) <- c("xgr","ygr","zgr")
mod <- loess(zgr ~xgr*ygr, data = gr) # fit localised nonparametric regression to estimate food density from x and y

# predict density for household points

house_retail <- predict(mod,
                        newdata=data.frame(xgr=datfin$lat,
                                           ygr=datfin$lon))

# add density data to tgt - feel like need to check this

datfin$density_industrial <- house_industrial
datfin$density_retail <- house_retail

# re-run BRT

# BRT

## fast trees for evaluation, for final analysis change to n.folds=10, n.trees=50

nvar <- length(datfin[1,])
par(mfrow=c(1,1))

egbm2 <- gbm.step(datfin,
                  gbm.y=1,
                  gbm.x=2:nvar,
                  tree.complexity=3,
                  family="bernoulli",
                  n.folds=2, 
                  n.trees=5,
                  step.size = 1, 
                  verbose=FALSE)
summary(egbm2, family = "serif", las=1)

# plot the brt results

op <- par(family = "serif")
gbm.plot(egbm2, 
         variable.no=0, 
         smooth=FALSE, 
         rug=TRUE, 
         n.plots=6, 
         common.scale=TRUE,
         write.title=FALSE, 
         y.label="Fitted function", 
         x.label=NULL, 
         show.contrib=TRUE,
         plot.layout=c(2,3),
         cex.axis = 2,
         cex.lab = 1.5,
         lwd = 2)

# check the brt
best.iter <- 5000
egbm2.pred <- predict.gbm(egbm2,datfin,best.iter)
summary(egbm2.pred)
plot(as.factor(datfin$FS_tgt),egbm2.pred, xlab="observed", ylab="predicted")
table(as.factor(datfin$FS_tgt),cut(egbm2.pred,c(-10,0,10)))

# rescale FS_tgt to 1 to 10 score (10 high urgency)
datfin$FS_pred <- egbm2.pred
datfin$FS_pred_10 <- scales::rescale(datfin$FS_pred, to=c(0,10))

hist <- ggplot(datfin, aes(FS_pred_10)) +
  geom_density() +
  labs(x = "Food security score (10 high urgency)")
hist

# already suggests follow-up: split households and do models for food-insecure only?

# print top 5 suburbs to target for intervention now

top5table <- top5[,c("place",
                     "FS_pred_10")]
names(top5table) <- c("place", 
                      "Food security score (0-10)")



fmap <- qmap("Johannesburg",
             zoom = 8) +
  geom_point(aes(lon,lat),
             data=household_total_geo,
             size=1,
             color="darkblue",
             alpha=.5)
fmap


# map them

datmap <- datfin[,c(8,9,13)]

datmap <- datmap[!is.na(datmap$lat),]
datmap <- datmap[!is.na(datmap$lon),]

fmap <- qmap("Cape Town",
             zoom=8) +
  geom_point(aes(lon,lat),
             data=datmap,
             size=2,
             color="darkblue",
             alpha=.5)
fmap


##################

# density map
foodsecuritymap <- qmap("Cape Town")+
  stat_density2d(aes(x=lon,
                     y=lat,
                     fill=..level..,
                     alpha=..level..),
                 data=datmap,
                 geom="polygon")
foodsecuritymap


# CART

attach(datfin)

cart_bin <- rpart(as.factor(FS_tgt) ~
                    property_market_value + 
                    hh_size +
                    income +
                    age +
                    roof_material +
                    gender +
                    density_industrial +
                    density_retail,
                  maxdepth=10,
                  xval=10)

# draw the plot for relative importance of each variable
cart_bin$variable.importance # gives the relative importance of each variable
imp <- as.matrix(cart_bin$variable.importance)
names <- rownames(imp)
plot(imp, type="h", xaxt="n", xlab="", ylab="relative importance", lwd=4)
axis(1, labels = names, at=1:3, las=2)
title(main="Relative Importance of Predictors")

# draw the prettier tree plot
fancyRpartPlot(cart_bin, sub="")				# A fancy plot

detach(datfin) # detach data
#


# model v3: add shapefiles



# layer a: geographic information

# basic map of Cape Town
#CT_map <- qmap("Cape Town")
#CT_map

# import shapefile data
agri <- readOGR(dsn = "Agricultural land 2016", layer = "SL_AGRC_LAND")
#bio <- readOGR(dsn = "Biodiversity network with protected areas 2017", layer = "SL_BDVR_NTWR") # bio has weird proj
SDRs <- readOGR(dsn = "Area based service delivery regions", layer = "SL_ABSD")
build <- readOGR(dsn = "Building footprints 2016", layer = "SL_2D_BSC_FTPR")
informal <- readOGR(dsn = "Informal trade bays 2017", layer = "SL_TRDG_BAY")

# extract data frames for each
build_f <- fortify(build) # convert polygons to df
build$id <- row.names(build) # add id variable to build
head(build@data) # check data before converting
build_f <- left_join(build_f, build@data) # join attributes to df


limit_points <- function(sfile,mypoints)
{xx <- sfile@bbox
return(mypoints[lat %between% c(xx[1, 1], xx[1, 2]) & lon %between% c(xx[2, 1], xx[2, 2])])}

#limit_points(agri))


#subset points in shapes
pointsdata$lat <- pointsdata$x
pointsdata$lon <- pointsdata$y

# what fraction of points are in each shape?
inside.area <- !is.na(over(points, 
                           as(informal, 
                              "SpatialPolygons"))) 
mean(inside.area) 

inside.area <- !is.na(over(points, agri)) 
mean(inside.area) 

# extract pixel values for points from data frames

points <- pointsdata[,c(3,4)]

subset_agri <- limit_points(agri,points)
points_agri <- data.frame(coordinates(subset_agri),
                        extract(agri, subset_agri))


points_SDRs <- data.frame(coordinates(pointsdata),
                          extract(SDRs, pointsdata))



# layer b: food availability information

# business license data
businesses <- read.csv("Busines Licences DevData 20180220.csv") # read in data
head(businesses) # check data
sapply(businesses,class)

levels(businesses$Licence.Type) # check types of businesses
food_businesses <- businesses[businesses$Licence.Type=="Food" , businesses$Licence.Type=="Hawker",] # make dataset with only food businesses

# industrial supplier data
industrials <- read.csv("Merged_Cape_Town_Industrial.csv")
#View(table(industrials$Standardised.Economic.Activity))
industrials$food <- NULL #identify food-related industrial entities
industrials_food <- industrials[industrials$Standardised.Economic.Activity %in%
                                  c("Beverage serving activities" ,
                                    "Cargo handling" , "Courier activities" , "Courier activities", "Courier company" ,
                                    "Event catering" , "Event Catering" , "Event catering and other food service activities" ,
                                    "food service activities of take-away counters" , "Food service activities of take-away counters" ,
                                    "Food service activities of take away counters" , "Food service and take away counters" ,
                                    "Freight air transport" , "Freight rail transport" , "Freight transport by road" ,
                                    "Hunting, trapping and related service activities" , "Manufacture bakery products" ,
                                    "Manufacture of agricultural and forestry machinery" , "Manufacture of bakery products" ,
                                    "Manufacture of beverages" , "Manufacture of butter and cheese" , "Manufacture of cocoa, chocolate and sugar confectionery" ,
                                    "Manufacture of coffee, coffee substitutes and tea" , "Manufacture of compound cooking fats, margarine and edible oils" ,
                                    "Manufacture of dairy products" , "Manufacture of fertilizers and nitrogen compounds" ,
                                    "Manufacture of flour and grain mill products, including rice and vegetable milling; grain mill residues" ,
                                    "Manufacture of grain mill products" , "Manufacture of ice cream and other edible ice (whether or not containing cream or chocolate)" ,
                                    "Manufacture of machinery for food, beverage and tobacco processing" , "Manufacture of malt liquors such as beer, ale, porter and stout" ,
                                    "Manufacture of metal containers, e.g. cans and tins" , "Manufacture of other food products" ,
                                    "Manufacture of other food products n.e.c." , 
                                    "Manufacture of prepared and preserved meat, including sausage; by-products (hides, bones, etc.)" ,
                                    "Manufacture of prepared and preserved meat, including sausage; by-products (hides, bones, etc.) " ,
                                    "Manufacture of prepared animal feeds" , "Manufacture of prepared meals and dishes" , "Manufacture of soft drinks; production of mineral waters and other bottled waters" ,
                                    "Manufacture of spices, condiments, vinegar, yeast, egg products, soups and other food products n.e.c." , 
                                    "Manufacture of spices, condiments, vinegar, yeast, egg products, soups and other food products n.e.c. " ,
                                    "Manufacture of starches and starch products" , "Manufacture of sugar" , "Manufacture of vegetable and animal oils and fats" ,
                                    "Manufacture of wines" , "Manufacture of wooden containers" , "Manufacturing of beverages" , "Manufacturing of food products" ,
                                    "Marine fishing" , "Other processing and preserving of meat" , "Other restaurant and mobile food service activities" ,
                                    "Other service activities incidental to land transportation" , "Other transportation support activities" ,
                                    "Packaging activities" , "Processing and preserving of fish, crustaceans and molluscs" , "Processing and preserving of fruit and vegetables" ,
                                    "Processing and preserving of meat" , "Processing of fresh milk" ,
                                    "Renting of agricultural machinery and equipment" , "Renting of land transport equipment" ,
                                    "Renting of water transport equipment" , "Repair of household appliances and home and garden equipment" ,
                                    "Restaurants and mobile food service activities" , 
                                    "Retail in meat and meat products" ,
                                    "Retail sale in non-specialised stores with food, beverages and tobacco predominating" ,
                                    "Retail sale in non-specialised stores with food, beverages or tobacco predominating" ,
                                    "Retail sale in non-specialized stores with food, beverages or tobacco predominating" ,
                                    "Retail sale of beverages in specialised stores" , "Retail sale of food in specialised stores" , "Retail sale of food, beverages and tobacco in specialised stores" ,
                                    "Retail trade in bakery products" , "Retail trade in fresh fruit and vegetables" , "Retail trade in meat and meat products" ,
                                    "Sea and coastal freight water transport" , "Service activities incidental to land transportation" , "Service activities incidental to water transportation" ,
                                    "Support activities for animal production" , "Support activities for crop production" , "Warehousing and storage" ,
                                    "Water collection, treatment and supply" , "Wholesale of agricultural machinery, equipment and supplies" ,
                                    "Wholesale of agricultural raw materials and live animals" , "Wholesale of food, beverages and tobacco" ,
                                    "Wholesale of meat and meat products" , "Wholesale trade in beverages" , "Wholesale trade in foodstuff" ,
                                    "wholesale trade in foodstuffs" , "Wholesale trade in foodstuffs"),]

# look up business locations from addresses (ONCE)
food_businesses$address <- paste(food_businesses$Business.Location, food_businesses$Business.Suburb,"Cape Town","South Africa", sep=", ")
#food_business_geo <- mutate_geocode(food_businesses, address) # RUN THIS ONLY ONCE
industrials_food$address <- paste(industrials_food$Address,industrials_food$Suburb,"Cape Town", "South Africa", sep = ", ")
#industrials_food_geo <- mutate_geocode(industrials_food, address) # RUN THIS ONLY ONCE

# write business locations to csv
write.csv(food_business_geo, "geocoded_food_businesses.csv")
write.csv(industrials_food_geo, "geocoded_food_industrial.csv")

# convert informal to points
informal_points <- informal_f[,c(1,2)]

# map food businesses
retail <- read.csv("geocoded_food_businesses.csv")
industrial <- read.csv("geocoded_food_industrial.csv")
addressmaps <- c(retail,industrial)

fmap <- qmap("Cape Town") +
  geom_point(aes(lon,lat),
             data=industrial,
             size=2,
             color="darkblue",
             alpha=.5)
fmap


# density map
foodbusinessmap <- qmap("Cape Town")+
  stat_density2d(aes(x=lon,
                     y=lat,
                     fill=..level..,
                     alpha=..level..),
                 data=industrial,
                 geom="polygon")
foodbusinessmap

foodbusinessmappoints <- foodbusinessmap +
  geom_point(aes(x,y),
             data=pointsdata,
             size=2,
             color="darkred",
             alpha=.5)
foodbusinessmappoints

# estimate food density for each point
library(MASS)
fb1 <- industrial[!is.na(industrial$lat),]
dens <- kde2d(fb1$lat,fb1$lon) # estimate food business density
gr <- data.frame(with(dens, expand.grid(x,y)), as.vector(dens$z)) # put density into data frame
names(gr) <- c("xgr","ygr","zgr")
mod <- loess(zgr ~xgr*ygr, data = gr) # fit localised nonparametric regression to estimate food density from x and y
pointsfb <- predict(mod,
                    newdata=data.frame(xgr=points$x,
                                       ygr=points$y))



# stick the data together
dat <- as.data.frame(cbind(pointsdata,data_agri,pointsfb))



# make interactive map
library(leaflet)


# add data from previous general household surveys and make predictive
